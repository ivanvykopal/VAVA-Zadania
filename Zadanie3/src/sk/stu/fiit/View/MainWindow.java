/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stu.fiit.View;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.MouseListener;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;

/**
 *
 * @author Ivan Vykopal
 */
public class MainWindow extends javax.swing.JFrame {
    private static final Logger logger = Logger.getLogger(MainWindow.class);
    private Locale locale;
    private ResourceBundle bundle;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        logger.setLevel(Level.INFO);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lbDate = new javax.swing.JLabel();
        lbTime = new javax.swing.JLabel();
        cbLanguage = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        pCreateCategory = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taCategoryDescription = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        tfCategoryPrice = new javax.swing.JTextField();
        btnAddCategory = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        pCreateService = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        tfServiceName = new javax.swing.JTextField();
        tfServicePrice = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        taServiceDescription = new javax.swing.JTextArea();
        jLabel19 = new javax.swing.JLabel();
        btnCreateService = new javax.swing.JButton();
        pSetDate = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        cbDay = new javax.swing.JComboBox<>();
        cbMonth = new javax.swing.JComboBox<>();
        cbYear = new javax.swing.JComboBox<>();
        cbHour = new javax.swing.JComboBox<>();
        cbMinutes = new javax.swing.JComboBox<>();
        btnSetTime = new javax.swing.JButton();
        spAddAccommodation2 = new javax.swing.JScrollPane();
        pAddAccommodation2 = new javax.swing.JPanel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        tfAccName2 = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        tfAccPhone2 = new javax.swing.JTextField();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        tfAccPrice2 = new javax.swing.JTextField();
        ftfAccTo2 = new javax.swing.JFormattedTextField();
        ftfAccFrom2 = new javax.swing.JFormattedTextField();
        btnAddAcc2 = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        tbAccRooms = new javax.swing.JTable();
        btnAccFindRoom = new javax.swing.JButton();
        lbAccRoom2 = new javax.swing.JLabel();
        spCreatePayment = new javax.swing.JScrollPane();
        pCreatePayment = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jScrollPane14 = new javax.swing.JScrollPane();
        tbPaymentAcc = new javax.swing.JTable();
        lbPaymentName = new javax.swing.JLabel();
        cbPaymentType = new javax.swing.JComboBox<>();
        btnCreatePayment = new javax.swing.JButton();
        lbPaymentFrom = new javax.swing.JLabel();
        lbPaymentTo = new javax.swing.JLabel();
        lbPaymnetRoom = new javax.swing.JLabel();
        lbPaymentPrice = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        spCreateReservation = new javax.swing.JScrollPane();
        pCreateReservation = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        tfReservationName = new javax.swing.JTextField();
        ftfReservationFrom = new javax.swing.JFormattedTextField();
        ftfReservationTo = new javax.swing.JFormattedTextField();
        tfReservationPrice = new javax.swing.JTextField();
        btnCreateReservation = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        tfReservationPhone = new javax.swing.JTextField();
        jScrollPane13 = new javax.swing.JScrollPane();
        tbReservationsRooms = new javax.swing.JTable();
        btnResFindRoom = new javax.swing.JButton();
        lbResRoom = new javax.swing.JLabel();
        spViewCustomerHistory = new javax.swing.JScrollPane();
        pViewCustomerHistory = new javax.swing.JPanel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tbCustomers = new javax.swing.JTable();
        btnViewCustomerHistory = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        tbCustomerAcc = new javax.swing.JTable();
        jScrollPane17 = new javax.swing.JScrollPane();
        tbUsedServices = new javax.swing.JTable();
        jLabel54 = new javax.swing.JLabel();
        spEditRoom = new javax.swing.JScrollPane();
        pEditRoom = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        tfEditName = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        taEditDescription = new javax.swing.JTextArea();
        lbPhoto = new javax.swing.JLabel();
        btnEditPrev = new javax.swing.JButton();
        btnEditNext = new javax.swing.JButton();
        btnEditRoom = new javax.swing.JButton();
        btnAddPhoto = new javax.swing.JButton();
        jLabel43 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        btnEditFill = new javax.swing.JButton();
        spRoomHistory = new javax.swing.JScrollPane();
        pRoomHistory = new javax.swing.JPanel();
        jLabel52 = new javax.swing.JLabel();
        jScrollPane15 = new javax.swing.JScrollPane();
        tbRoomsHistory = new javax.swing.JTable();
        btnViewRoomHistory = new javax.swing.JButton();
        jScrollPane16 = new javax.swing.JScrollPane();
        tbAccHistory = new javax.swing.JTable();
        jLabel53 = new javax.swing.JLabel();
        pHomePage = new javax.swing.JPanel();
        jLabel55 = new javax.swing.JLabel();
        lbAccEnd = new javax.swing.JLabel();
        lbAccStart = new javax.swing.JLabel();
        spCreateRoom = new javax.swing.JScrollPane();
        pCreateRoom = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        tfRoomLabel = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        btnCreateRoom = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        taRoomDescription = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbCategories = new javax.swing.JTable();
        spCreateCustomer = new javax.swing.JScrollPane();
        pCreateCustomer = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        tfAddress = new javax.swing.JTextField();
        tfNumber = new javax.swing.JTextField();
        tfTown = new javax.swing.JTextField();
        tfPSC = new javax.swing.JTextField();
        tfPhone = new javax.swing.JTextField();
        tfEmail = new javax.swing.JTextField();
        btnCreateCustomer = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        spCancelReservation = new javax.swing.JScrollPane();
        pCancelReservation = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbReservations = new javax.swing.JTable();
        btnCancelReservation = new javax.swing.JButton();
        lbCancelResName = new javax.swing.JLabel();
        lbCancelResFrom = new javax.swing.JLabel();
        lbCancelResTo = new javax.swing.JLabel();
        lbCancelResPrice = new javax.swing.JLabel();
        lbCancelResRoom = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        spEndedAccommodations = new javax.swing.JScrollPane();
        pEndedAccommodations = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tbEndedAccommodations = new javax.swing.JTable();
        lbEndedName = new javax.swing.JLabel();
        lbEndedFrom = new javax.swing.JLabel();
        lbEndedTo = new javax.swing.JLabel();
        lbEndedRoom = new javax.swing.JLabel();
        lbEndedPrice = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        spAddServiceUsage = new javax.swing.JScrollPane();
        pAddServiceUsage = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        tfAddUsageRoom = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tbServices = new javax.swing.JTable();
        btnAddServiceUsage = new javax.swing.JButton();
        jLabel32 = new javax.swing.JLabel();
        tfQuantity = new javax.swing.JTextField();
        spAddAccommodation1 = new javax.swing.JScrollPane();
        pAddAccommodation1 = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        tbAccReservations = new javax.swing.JTable();
        btnAddAcc1 = new javax.swing.JButton();
        lbAccFrom1 = new javax.swing.JLabel();
        lbAccName1 = new javax.swing.JLabel();
        lbAccRoom1 = new javax.swing.JLabel();
        lbAccTo1 = new javax.swing.JLabel();
        lbAccPrice1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        miViewHomePage = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        miAccWithReservation = new javax.swing.JMenuItem();
        miAccWithoutReservation = new javax.swing.JMenuItem();
        miPayment = new javax.swing.JMenuItem();
        miViewEnded = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        miCreateReservation = new javax.swing.JMenuItem();
        miCancelReservation = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        miCreateCustomer = new javax.swing.JMenuItem();
        miCustomerHistory = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        miCreateCategory = new javax.swing.JMenuItem();
        miCreateRoom = new javax.swing.JMenuItem();
        miEditRoom = new javax.swing.JMenuItem();
        miRoomHistory = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        miCreateService = new javax.swing.JMenuItem();
        miAddServiceUsage = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        miChangeDate = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(bundle.getString("TITLE"));
        setMinimumSize(new java.awt.Dimension(875, 1000));
        setPreferredSize(new java.awt.Dimension(1400, 900));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        lbDate.setFont(new java.awt.Font("Arial", 0, 50)); // NOI18N
        lbDate.setText(bundle.getString("DEFAULTDATE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel2.add(lbDate, gridBagConstraints);

        lbTime.setFont(new java.awt.Font("Arial", 0, 50)); // NOI18N
        lbTime.setText("12:00:00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        jPanel2.add(lbTime, gridBagConstraints);

        cbLanguage.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        cbLanguage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SK", "EN US" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(25, 200, 25, 25);
        jPanel2.add(cbLanguage, gridBagConstraints);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new java.awt.CardLayout());

        pCreateCategory.setBackground(new java.awt.Color(255, 255, 255));
        pCreateCategory.setLayout(new java.awt.GridBagLayout());

        jLabel8.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel8.setText(bundle.getString("CATEGORY_DESCRIPTION"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateCategory.add(jLabel8, gridBagConstraints);

        jScrollPane1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jScrollPane1.setPreferredSize(new java.awt.Dimension(500, 400));

        taCategoryDescription.setColumns(20);
        taCategoryDescription.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        taCategoryDescription.setLineWrap(true);
        taCategoryDescription.setRows(5);
        taCategoryDescription.setWrapStyleWord(true);
        taCategoryDescription.setPreferredSize(new java.awt.Dimension(500, 350));
        jScrollPane1.setViewportView(taCategoryDescription);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 75, 25, 25);
        pCreateCategory.add(jScrollPane1, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel9.setText(bundle.getString("PRICE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateCategory.add(jLabel9, gridBagConstraints);

        tfCategoryPrice.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfCategoryPrice.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 75, 25, 25);
        pCreateCategory.add(tfCategoryPrice, gridBagConstraints);

        btnAddCategory.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnAddCategory.setText(bundle.getString("ADD_CATEGORY"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateCategory.add(btnAddCategory, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel11.setText(bundle.getString("ADD_CATEGORY_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        pCreateCategory.add(jLabel11, gridBagConstraints);

        jPanel3.add(pCreateCategory, "card3");

        pCreateService.setBackground(new java.awt.Color(255, 255, 255));
        pCreateService.setLayout(new java.awt.GridBagLayout());

        jLabel16.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel16.setText(bundle.getString("SERVICE_NAME"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateService.add(jLabel16, gridBagConstraints);

        jLabel17.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel17.setText(bundle.getString("PRICE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateService.add(jLabel17, gridBagConstraints);

        jLabel18.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel18.setText(bundle.getString("SERVICE_DESCRIPTION"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateService.add(jLabel18, gridBagConstraints);

        tfServiceName.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfServiceName.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 75, 25, 25);
        pCreateService.add(tfServiceName, gridBagConstraints);

        tfServicePrice.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfServicePrice.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 75, 25, 25);
        pCreateService.add(tfServicePrice, gridBagConstraints);

        jScrollPane3.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jScrollPane3.setPreferredSize(new java.awt.Dimension(350, 250));

        taServiceDescription.setColumns(20);
        taServiceDescription.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        taServiceDescription.setLineWrap(true);
        taServiceDescription.setRows(5);
        taServiceDescription.setWrapStyleWord(true);
        taServiceDescription.setPreferredSize(new java.awt.Dimension(290, 200));
        jScrollPane3.setViewportView(taServiceDescription);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 75, 25, 25);
        pCreateService.add(jScrollPane3, gridBagConstraints);

        jLabel19.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel19.setText(bundle.getString("ADD_SERVICE_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        pCreateService.add(jLabel19, gridBagConstraints);

        btnCreateService.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnCreateService.setText(bundle.getString("ADD_SERVICE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateService.add(btnCreateService, gridBagConstraints);

        jPanel3.add(pCreateService, "card5");

        pSetDate.setBackground(new java.awt.Color(255, 255, 255));
        pSetDate.setLayout(new java.awt.GridBagLayout());

        jLabel29.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel29.setText(bundle.getString("DATE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pSetDate.add(jLabel29, gridBagConstraints);

        jLabel37.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel37.setText(bundle.getString("DATE_SET"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 150, 0);
        pSetDate.add(jLabel37, gridBagConstraints);

        jLabel30.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel30.setText(bundle.getString("TIME"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pSetDate.add(jLabel30, gridBagConstraints);

        cbDay.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pSetDate.add(cbDay, gridBagConstraints);

        cbMonth.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        cbMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { bundle.getString("MONTH"), bundle.getString("JANUARY"), bundle.getString("FEBRUARY"), bundle.getString("MARCH"), bundle.getString("APRIL"), bundle.getString("MAY"), bundle.getString("JUNE"), bundle.getString("JULY"), bundle.getString("AUGUST"), bundle.getString("SEPTEMBER"), bundle.getString("OCTOBER"), bundle.getString("NOVEMBER"), bundle.getString("DECEMBER") }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pSetDate.add(cbMonth, gridBagConstraints);

        cbYear.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pSetDate.add(cbYear, gridBagConstraints);

        cbHour.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pSetDate.add(cbHour, gridBagConstraints);

        cbMinutes.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pSetDate.add(cbMinutes, gridBagConstraints);

        btnSetTime.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnSetTime.setText(bundle.getString("SET_DATE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pSetDate.add(btnSetTime, gridBagConstraints);

        jPanel3.add(pSetDate, "card9");

        pAddAccommodation2.setBackground(new java.awt.Color(255, 255, 255));
        pAddAccommodation2.setPreferredSize(new java.awt.Dimension(1306, 1200));
        pAddAccommodation2.setLayout(new java.awt.GridBagLayout());

        jLabel45.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel45.setText(bundle.getString("ACC_WITHOUT_RESERVATION"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 25, 0);
        pAddAccommodation2.add(jLabel45, gridBagConstraints);

        jLabel46.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel46.setText(bundle.getString("CUSTOMER_NAME"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 150, 10, 25);
        pAddAccommodation2.add(jLabel46, gridBagConstraints);

        tfAccName2.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfAccName2.setMinimumSize(new java.awt.Dimension(250, 30));
        tfAccName2.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 450, 10, 25);
        pAddAccommodation2.add(tfAccName2, gridBagConstraints);

        jLabel47.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel47.setText(bundle.getString("CUSTOMER_PHONE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 150, 10, 25);
        pAddAccommodation2.add(jLabel47, gridBagConstraints);

        tfAccPhone2.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfAccPhone2.setMinimumSize(new java.awt.Dimension(250, 30));
        tfAccPhone2.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 450, 10, 25);
        pAddAccommodation2.add(tfAccPhone2, gridBagConstraints);

        jLabel49.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel49.setText(bundle.getString("DATE_FROM"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 150, 10, 25);
        pAddAccommodation2.add(jLabel49, gridBagConstraints);

        jLabel50.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel50.setText(bundle.getString("DATE_TO"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 150, 10, 25);
        pAddAccommodation2.add(jLabel50, gridBagConstraints);

        jLabel51.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel51.setText(bundle.getString("PRICE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 150, 25, 25);
        pAddAccommodation2.add(jLabel51, gridBagConstraints);

        tfAccPrice2.setEditable(false);
        tfAccPrice2.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfAccPrice2.setMinimumSize(new java.awt.Dimension(250, 30));
        tfAccPrice2.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 450, 25, 25);
        pAddAccommodation2.add(tfAccPrice2, gridBagConstraints);

        ftfAccTo2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat(bundle.getString("DATE_FORMAT")))));
        ftfAccTo2.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        ftfAccTo2.setMinimumSize(new java.awt.Dimension(250, 30));
        ftfAccTo2.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 450, 10, 25);
        pAddAccommodation2.add(ftfAccTo2, gridBagConstraints);

        ftfAccFrom2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat(bundle.getString("DATE_FORMAT")))));
        ftfAccFrom2.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        ftfAccFrom2.setMinimumSize(new java.awt.Dimension(250, 30));
        ftfAccFrom2.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 450, 10, 25);
        pAddAccommodation2.add(ftfAccFrom2, gridBagConstraints);

        btnAddAcc2.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnAddAcc2.setText(bundle.getString("ADD_ACCOMMODATION"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pAddAccommodation2.add(btnAddAcc2, gridBagConstraints);

        tbAccRooms.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbAccRooms.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbAccRooms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("ROOM_TB"), bundle.getString("DESCRIPTION"), bundle.getString("PRICE_NIGHT_TB")
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbAccRooms.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane12.setViewportView(tbAccRooms);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 800;
        gridBagConstraints.ipady = 350;
        gridBagConstraints.insets = new java.awt.Insets(25, 50, 25, 50);
        pAddAccommodation2.add(jScrollPane12, gridBagConstraints);

        btnAccFindRoom.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnAccFindRoom.setText(bundle.getString("FREE_ROOMS"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(10, 25, 25, 25);
        pAddAccommodation2.add(btnAccFindRoom, gridBagConstraints);

        lbAccRoom2.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        lbAccRoom2.setText(bundle.getString("CHOOSED_ROOM"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pAddAccommodation2.add(lbAccRoom2, gridBagConstraints);

        spAddAccommodation2.setViewportView(pAddAccommodation2);

        jPanel3.add(spAddAccommodation2, "card17");

        pCreatePayment.setBackground(new java.awt.Color(255, 255, 255));
        pCreatePayment.setPreferredSize(new java.awt.Dimension(1056, 1050));
        pCreatePayment.setLayout(new java.awt.GridBagLayout());

        jLabel22.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel22.setText(bundle.getString("CREATE_PAYMENT_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        pCreatePayment.add(jLabel22, gridBagConstraints);

        jLabel48.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        jLabel48.setText(bundle.getString("CHOOSE_CUSTOMER_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 0, 25);
        pCreatePayment.add(jLabel48, gridBagConstraints);

        tbPaymentAcc.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbPaymentAcc.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbPaymentAcc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("CUSTOMER_NAME_TB"), bundle.getString("CUSTOMER_PHONE_TB"), bundle.getString("DATE_FROM_TB"), bundle.getString("DATE_TO_TB"), bundle.getString("ROOM_TB"), bundle.getString("PRICE_TB")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbPaymentAcc.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane14.setViewportView(tbPaymentAcc);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 900;
        gridBagConstraints.ipady = 400;
        gridBagConstraints.insets = new java.awt.Insets(25, 50, 25, 50);
        pCreatePayment.add(jScrollPane14, gridBagConstraints);

        lbPaymentName.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbPaymentName.setText(bundle.getString("CUSTOMER_NAME"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 350, 10, 25);
        pCreatePayment.add(lbPaymentName, gridBagConstraints);

        cbPaymentType.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        cbPaymentType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { bundle.getString("CHOOSE_PAYMENT_TYPE"), bundle.getString("CASH"), bundle.getString("CARD") }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 450, 25, 25);
        pCreatePayment.add(cbPaymentType, gridBagConstraints);

        btnCreatePayment.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnCreatePayment.setText(bundle.getString("CREATE_PAYMENT"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreatePayment.add(btnCreatePayment, gridBagConstraints);

        lbPaymentFrom.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbPaymentFrom.setText(bundle.getString("DATE_FROM"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 350, 10, 25);
        pCreatePayment.add(lbPaymentFrom, gridBagConstraints);

        lbPaymentTo.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbPaymentTo.setText(bundle.getString("DATE_FROM"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 350, 10, 25);
        pCreatePayment.add(lbPaymentTo, gridBagConstraints);

        lbPaymnetRoom.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbPaymnetRoom.setText(bundle.getString("ROOM"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 350, 10, 25);
        pCreatePayment.add(lbPaymnetRoom, gridBagConstraints);

        lbPaymentPrice.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbPaymentPrice.setText(bundle.getString("PRICE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 350, 25, 25);
        pCreatePayment.add(lbPaymentPrice, gridBagConstraints);

        jLabel57.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel57.setText(bundle.getString("PAYMENT_TYPE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 250, 25, 25);
        pCreatePayment.add(jLabel57, gridBagConstraints);

        spCreatePayment.setViewportView(pCreatePayment);

        jPanel3.add(spCreatePayment, "card17");

        pCreateReservation.setBackground(new java.awt.Color(255, 255, 255));
        pCreateReservation.setLayout(new java.awt.GridBagLayout());

        jLabel20.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel20.setText(bundle.getString("CREATE_RESERVATION_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 25, 0);
        pCreateReservation.add(jLabel20, gridBagConstraints);

        jLabel21.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel21.setText(bundle.getString("CUSTOMER_PHONE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 150, 10, 25);
        pCreateReservation.add(jLabel21, gridBagConstraints);

        jLabel23.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel23.setText(bundle.getString("DATE_FROM"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 150, 10, 25);
        pCreateReservation.add(jLabel23, gridBagConstraints);

        jLabel24.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel24.setText(bundle.getString("DATE_TO"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 150, 10, 25);
        pCreateReservation.add(jLabel24, gridBagConstraints);

        jLabel25.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel25.setText(bundle.getString("PRICE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 150, 10, 25);
        pCreateReservation.add(jLabel25, gridBagConstraints);

        tfReservationName.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfReservationName.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 450, 10, 25);
        pCreateReservation.add(tfReservationName, gridBagConstraints);

        ftfReservationFrom.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat(bundle.getString("DATE_FORMAT")))));
        ftfReservationFrom.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        ftfReservationFrom.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 450, 10, 25);
        pCreateReservation.add(ftfReservationFrom, gridBagConstraints);

        ftfReservationTo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat(bundle.getString("DATE_FORMAT")))));
        ftfReservationTo.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        ftfReservationTo.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 450, 10, 25);
        pCreateReservation.add(ftfReservationTo, gridBagConstraints);

        tfReservationPrice.setEditable(false);
        tfReservationPrice.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfReservationPrice.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 450, 10, 25);
        pCreateReservation.add(tfReservationPrice, gridBagConstraints);

        btnCreateReservation.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnCreateReservation.setText(bundle.getString("CREATE_RESERVATION"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateReservation.add(btnCreateReservation, gridBagConstraints);

        jLabel26.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel26.setText(bundle.getString("CUSTOMER_NAME"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 150, 10, 25);
        pCreateReservation.add(jLabel26, gridBagConstraints);

        tfReservationPhone.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfReservationPhone.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 450, 10, 25);
        pCreateReservation.add(tfReservationPhone, gridBagConstraints);

        tbReservationsRooms.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbReservationsRooms.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbReservationsRooms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("ROOM_TB"), bundle.getString("DESCRIPTION"), bundle.getString("PRICE_NIGHT_TB")
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbReservationsRooms.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane13.setViewportView(tbReservationsRooms);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 500;
        gridBagConstraints.insets = new java.awt.Insets(25, 50, 25, 50);
        pCreateReservation.add(jScrollPane13, gridBagConstraints);

        btnResFindRoom.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnResFindRoom.setText(bundle.getString("FREE_ROOMS"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(10, 25, 25, 25);
        pCreateReservation.add(btnResFindRoom, gridBagConstraints);

        lbResRoom.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        lbResRoom.setText(bundle.getString("CHOOSED_ROOM"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateReservation.add(lbResRoom, gridBagConstraints);

        spCreateReservation.setViewportView(pCreateReservation);

        jPanel3.add(spCreateReservation, "card17");

        pViewCustomerHistory.setBackground(new java.awt.Color(255, 255, 255));
        pViewCustomerHistory.setLayout(new java.awt.GridBagLayout());

        jLabel40.setFont(new java.awt.Font("Arial", 0, 30)); // NOI18N
        jLabel40.setText(bundle.getString("USAGE_SERVICES"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        pViewCustomerHistory.add(jLabel40, gridBagConstraints);

        jLabel41.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel41.setText(bundle.getString("CUSTOMER_HISTORY_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        pViewCustomerHistory.add(jLabel41, gridBagConstraints);

        tbCustomers.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbCustomers.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbCustomers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("CUSTOMER_NAME_TB"), bundle.getString("CUSTOMER_TOWN_TB"), bundle.getString("CUSTOMER_PHONE_TB"), bundle.getString("CUSTOMER_EMAIL_TB")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbCustomers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane8.setViewportView(tbCustomers);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 500;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pViewCustomerHistory.add(jScrollPane8, gridBagConstraints);

        btnViewCustomerHistory.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnViewCustomerHistory.setText(bundle.getString("CUSTOMER_HISTORY"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pViewCustomerHistory.add(btnViewCustomerHistory, gridBagConstraints);

        tbCustomerAcc.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbCustomerAcc.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbCustomerAcc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("ROOM"), bundle.getString("DATE_FROM_TB"), bundle.getString("DATE_TO_TB"), bundle.getString("PRICE_TB"), bundle.getString("PAYMENT_DATE_TB"), bundle.getString("PAYMENT_TYPE_TB")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbCustomerAcc.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane9.setViewportView(tbCustomerAcc);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 500;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pViewCustomerHistory.add(jScrollPane9, gridBagConstraints);

        tbUsedServices.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbUsedServices.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbUsedServices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("SERVICE_NAME_TB"), bundle.getString("DESCRIPTION"), bundle.getString("QUANTITY_TB"), bundle.getString("PRICE_ONE_TB"), bundle.getString("USAGE_DATE")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbUsedServices.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane17.setViewportView(tbUsedServices);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 500;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pViewCustomerHistory.add(jScrollPane17, gridBagConstraints);

        jLabel54.setFont(new java.awt.Font("Arial", 0, 30)); // NOI18N
        jLabel54.setText(bundle.getString("ACCOMMODATION_TB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        pViewCustomerHistory.add(jLabel54, gridBagConstraints);

        spViewCustomerHistory.setViewportView(pViewCustomerHistory);

        jPanel3.add(spViewCustomerHistory, "card17");

        pEditRoom.setBackground(new java.awt.Color(255, 255, 255));
        pEditRoom.setLayout(new java.awt.GridBagLayout());

        jLabel33.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel33.setText(bundle.getString("ROOM_LABEL"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 100, 25, 25);
        pEditRoom.add(jLabel33, gridBagConstraints);

        tfEditName.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfEditName.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 250, 25, 0);
        pEditRoom.add(tfEditName, gridBagConstraints);

        jLabel34.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel34.setText(bundle.getString("ROOM_DESCRIPTION"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 100, 25, 25);
        pEditRoom.add(jLabel34, gridBagConstraints);

        jScrollPane10.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jScrollPane10.setPreferredSize(new java.awt.Dimension(250, 250));

        taEditDescription.setColumns(20);
        taEditDescription.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        taEditDescription.setLineWrap(true);
        taEditDescription.setRows(5);
        taEditDescription.setWrapStyleWord(true);
        taEditDescription.setMinimumSize(new java.awt.Dimension(300, 200));
        taEditDescription.setPreferredSize(new java.awt.Dimension(300, 200));
        jScrollPane10.setViewportView(taEditDescription);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 250, 25, 25);
        pEditRoom.add(jScrollPane10, gridBagConstraints);

        lbPhoto.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 50, 50);
        pEditRoom.add(lbPhoto, gridBagConstraints);

        btnEditPrev.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnEditPrev.setText("<<");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 25, 250);
        pEditRoom.add(btnEditPrev, gridBagConstraints);

        btnEditNext.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnEditNext.setText(">>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(25, 250, 25, 0);
        pEditRoom.add(btnEditNext, gridBagConstraints);

        btnEditRoom.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnEditRoom.setText(bundle.getString("EDIT_ROOM"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = 168;
        gridBagConstraints.insets = new java.awt.Insets(50, 0, 50, 0);
        pEditRoom.add(btnEditRoom, gridBagConstraints);

        btnAddPhoto.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnAddPhoto.setText(bundle.getString("ADD_IMAGE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 25, 0);
        pEditRoom.add(btnAddPhoto, gridBagConstraints);

        jLabel43.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel43.setText(bundle.getString("EDIT_ROOM_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        pEditRoom.add(jLabel43, gridBagConstraints);

        jLabel42.setFont(new java.awt.Font("Arial", 0, 30)); // NOI18N
        jLabel42.setText(bundle.getString("PHOTOS_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 25, 0);
        pEditRoom.add(jLabel42, gridBagConstraints);

        btnEditFill.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnEditFill.setText(bundle.getString("FILL"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 550, 25, 0);
        pEditRoom.add(btnEditFill, gridBagConstraints);

        spEditRoom.setViewportView(pEditRoom);

        jPanel3.add(spEditRoom, "card17");

        pRoomHistory.setBackground(new java.awt.Color(255, 255, 255));
        pRoomHistory.setLayout(new java.awt.GridBagLayout());

        jLabel52.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel52.setText(bundle.getString("ROOM_HISTORY_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pRoomHistory.add(jLabel52, gridBagConstraints);

        tbRoomsHistory.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbRoomsHistory.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbRoomsHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("ROOM_TB"), bundle.getString("DESCRIPTION"), bundle.getString("PRICE_NIGHT_TB")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbRoomsHistory.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane15.setViewportView(tbRoomsHistory);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 500;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pRoomHistory.add(jScrollPane15, gridBagConstraints);

        btnViewRoomHistory.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnViewRoomHistory.setText(bundle.getString("ROOM_HISTORY"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pRoomHistory.add(btnViewRoomHistory, gridBagConstraints);

        tbAccHistory.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbAccHistory.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbAccHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("CUSTOMER_NAME_TB"), bundle.getString("DATE_FROM_TB"), bundle.getString("DATE_TO_TB"), bundle.getString("PRICE_TB")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbAccHistory.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane16.setViewportView(tbAccHistory);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 500;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pRoomHistory.add(jScrollPane16, gridBagConstraints);

        jLabel53.setFont(new java.awt.Font("Arial", 0, 30)); // NOI18N
        jLabel53.setText(bundle.getString("ACCOMMODATIONS"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        pRoomHistory.add(jLabel53, gridBagConstraints);

        spRoomHistory.setViewportView(pRoomHistory);

        jPanel3.add(spRoomHistory, "card17");

        pHomePage.setBackground(new java.awt.Color(255, 255, 255));
        pHomePage.setLayout(new java.awt.GridBagLayout());

        jLabel55.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel55.setText(bundle.getString("WELCOME_MESSAGE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 50, 50);
        pHomePage.add(jLabel55, gridBagConstraints);

        lbAccEnd.setFont(new java.awt.Font("Arial", 0, 30)); // NOI18N
        lbAccEnd.setText("Dnes končí ... ubytovaní");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 50, 50);
        pHomePage.add(lbAccEnd, gridBagConstraints);

        lbAccStart.setFont(new java.awt.Font("Arial", 0, 30)); // NOI18N
        lbAccStart.setText("Dnes začína ... ubytovaní");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(50, 50, 50, 50);
        pHomePage.add(lbAccStart, gridBagConstraints);

        jPanel3.add(pHomePage, "card17");

        pCreateRoom.setBackground(new java.awt.Color(255, 255, 255));
        pCreateRoom.setLayout(new java.awt.GridBagLayout());

        jLabel12.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel12.setText(bundle.getString("ADD_ROOM_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        pCreateRoom.add(jLabel12, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel13.setText(bundle.getString("ROOM_LABEL"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateRoom.add(jLabel13, gridBagConstraints);

        jLabel14.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel14.setText(bundle.getString("ROOM_INFO"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateRoom.add(jLabel14, gridBagConstraints);

        tfRoomLabel.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfRoomLabel.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 250, 25, 25);
        pCreateRoom.add(tfRoomLabel, gridBagConstraints);

        jLabel15.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        jLabel15.setText(bundle.getString("CHOOSE_CATEGORY"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateRoom.add(jLabel15, gridBagConstraints);

        btnCreateRoom.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnCreateRoom.setText(bundle.getString("ADD_ROOM"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 25, 0);
        pCreateRoom.add(btnCreateRoom, gridBagConstraints);

        jScrollPane4.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jScrollPane4.setPreferredSize(new java.awt.Dimension(250, 250));

        taRoomDescription.setColumns(20);
        taRoomDescription.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        taRoomDescription.setLineWrap(true);
        taRoomDescription.setRows(5);
        taRoomDescription.setWrapStyleWord(true);
        taRoomDescription.setPreferredSize(new java.awt.Dimension(250, 200));
        jScrollPane4.setViewportView(taRoomDescription);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 250, 25, 25);
        pCreateRoom.add(jScrollPane4, gridBagConstraints);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(900, 400));

        tbCategories.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbCategories.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbCategories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("DESCRIPTION"), bundle.getString("PRICE_TB")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbCategories.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(tbCategories);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateRoom.add(jScrollPane2, gridBagConstraints);

        spCreateRoom.setViewportView(pCreateRoom);

        jPanel3.add(spCreateRoom, "card18");

        pCreateCustomer.setBackground(new java.awt.Color(255, 255, 255));
        pCreateCustomer.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel1.setText(bundle.getString("CUSTOMER_NAME"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateCustomer.add(jLabel1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel2.setText(bundle.getString("CUSTOMER_ADDRESS"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateCustomer.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel3.setText(bundle.getString("CUSTOMER_NUMBER"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateCustomer.add(jLabel3, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel4.setText(bundle.getString("CUSTOMER_TOWN"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateCustomer.add(jLabel4, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel5.setText(bundle.getString("CUSTOMER_PSC"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateCustomer.add(jLabel5, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel6.setText(bundle.getString("CUSTOMER_PHONE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateCustomer.add(jLabel6, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel7.setText(bundle.getString("CUSTOMER_EMAIL"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateCustomer.add(jLabel7, gridBagConstraints);

        tfName.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfName.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(25, 50, 10, 25);
        pCreateCustomer.add(tfName, gridBagConstraints);

        tfAddress.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfAddress.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 10, 25);
        pCreateCustomer.add(tfAddress, gridBagConstraints);

        tfNumber.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfNumber.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 10, 25);
        pCreateCustomer.add(tfNumber, gridBagConstraints);

        tfTown.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfTown.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 10, 25);
        pCreateCustomer.add(tfTown, gridBagConstraints);

        tfPSC.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfPSC.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 10, 25);
        pCreateCustomer.add(tfPSC, gridBagConstraints);

        tfPhone.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfPhone.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 10, 25);
        pCreateCustomer.add(tfPhone, gridBagConstraints);

        tfEmail.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfEmail.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 25, 25);
        pCreateCustomer.add(tfEmail, gridBagConstraints);

        btnCreateCustomer.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnCreateCustomer.setText(bundle.getString("CREATE_CUSTOMER"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateCustomer.add(btnCreateCustomer, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel10.setText(bundle.getString("CREATE_CUSTOMER_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCreateCustomer.add(jLabel10, gridBagConstraints);

        spCreateCustomer.setViewportView(pCreateCustomer);

        jPanel3.add(spCreateCustomer, "card18");

        pCancelReservation.setBackground(new java.awt.Color(255, 255, 255));
        pCancelReservation.setLayout(new java.awt.GridBagLayout());

        tbReservations.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbReservations.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbReservations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("CUSTOMER_NAME_TB"), bundle.getString("CUSTOMER_PHONE_TB"), bundle.getString("DATE_FROM_TB"), bundle.getString("DATE_TO_TB"), bundle.getString("ROOM_TB"), bundle.getString("PRICE_TB")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbReservations.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(tbReservations);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 500;
        gridBagConstraints.ipady = 100;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCancelReservation.add(jScrollPane5, gridBagConstraints);

        btnCancelReservation.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnCancelReservation.setText(bundle.getString("REMOVE_RESERVATION"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pCancelReservation.add(btnCancelReservation, gridBagConstraints);

        lbCancelResName.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbCancelResName.setText(bundle.getString("CUSTOMER_NAME"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 300, 10, 25);
        pCancelReservation.add(lbCancelResName, gridBagConstraints);

        lbCancelResFrom.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbCancelResFrom.setText(bundle.getString("DATE_FROM"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 300, 10, 25);
        pCancelReservation.add(lbCancelResFrom, gridBagConstraints);

        lbCancelResTo.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbCancelResTo.setText(bundle.getString("DATE_FROM"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 300, 10, 25);
        pCancelReservation.add(lbCancelResTo, gridBagConstraints);

        lbCancelResPrice.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbCancelResPrice.setText(bundle.getString("PRICE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 300, 10, 25);
        pCancelReservation.add(lbCancelResPrice, gridBagConstraints);

        lbCancelResRoom.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbCancelResRoom.setText(bundle.getString("ROOM"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 300, 10, 25);
        pCancelReservation.add(lbCancelResRoom, gridBagConstraints);

        jLabel27.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel27.setText(bundle.getString("RESERVATION_INFO"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        pCancelReservation.add(jLabel27, gridBagConstraints);

        jLabel35.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel35.setText(bundle.getString("REMOVE_RESERVATION_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        pCancelReservation.add(jLabel35, gridBagConstraints);

        spCancelReservation.setViewportView(pCancelReservation);

        jPanel3.add(spCancelReservation, "card18");

        pEndedAccommodations.setBackground(new java.awt.Color(255, 255, 255));
        pEndedAccommodations.setPreferredSize(new java.awt.Dimension(1306, 1100));
        pEndedAccommodations.setLayout(new java.awt.GridBagLayout());

        jLabel28.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel28.setText(bundle.getString("ENDED_ACCOMMODATION"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        pEndedAccommodations.add(jLabel28, gridBagConstraints);

        tbEndedAccommodations.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbEndedAccommodations.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbEndedAccommodations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("CUSTOMER_NAME_TB"), bundle.getString("CUSTOMER_PHONE_TB"), bundle.getString("DATE_FROM_TB"), bundle.getString("DATE_TO_TB"), bundle.getString("ROOM_TB"), bundle.getString("PRICE_TB")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbEndedAccommodations.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane6.setViewportView(tbEndedAccommodations);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 500;
        gridBagConstraints.ipady = 100;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pEndedAccommodations.add(jScrollPane6, gridBagConstraints);

        lbEndedName.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbEndedName.setText(bundle.getString("CUSTOMER_NAME"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 300, 15, 25);
        pEndedAccommodations.add(lbEndedName, gridBagConstraints);

        lbEndedFrom.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbEndedFrom.setText(bundle.getString("DATE_FROM"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 300, 15, 25);
        pEndedAccommodations.add(lbEndedFrom, gridBagConstraints);

        lbEndedTo.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbEndedTo.setText(bundle.getString("DATE_TO"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 300, 15, 25);
        pEndedAccommodations.add(lbEndedTo, gridBagConstraints);

        lbEndedRoom.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbEndedRoom.setText(bundle.getString("ROOM"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 300, 15, 25);
        pEndedAccommodations.add(lbEndedRoom, gridBagConstraints);

        lbEndedPrice.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbEndedPrice.setText(bundle.getString("PRICE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 300, 15, 25);
        pEndedAccommodations.add(lbEndedPrice, gridBagConstraints);

        jLabel36.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel36.setText(bundle.getString("ACCOMMODATION_INFO"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        pEndedAccommodations.add(jLabel36, gridBagConstraints);

        spEndedAccommodations.setViewportView(pEndedAccommodations);

        jPanel3.add(spEndedAccommodations, "card18");

        pAddServiceUsage.setBackground(new java.awt.Color(255, 255, 255));
        pAddServiceUsage.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        pAddServiceUsage.setLayout(new java.awt.GridBagLayout());

        jLabel38.setFont(new java.awt.Font("Arial", 0, 25)); // NOI18N
        jLabel38.setText(bundle.getString("CHOOSE_SERVICE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        pAddServiceUsage.add(jLabel38, gridBagConstraints);

        jLabel31.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel31.setText(bundle.getString("ROOM"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 250, 25, 25);
        pAddServiceUsage.add(jLabel31, gridBagConstraints);

        tfAddUsageRoom.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfAddUsageRoom.setMinimumSize(new java.awt.Dimension(250, 30));
        tfAddUsageRoom.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(25, 250, 25, 25);
        pAddServiceUsage.add(tfAddUsageRoom, gridBagConstraints);

        jLabel39.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel39.setText(bundle.getString("ADD_SERVICEUSAGE_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        pAddServiceUsage.add(jLabel39, gridBagConstraints);

        tbServices.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbServices.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbServices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("SERVICE_NAME_TB"), bundle.getString("DESCRIPTION"), bundle.getString("PRICE_TB")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbServices.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane7.setViewportView(tbServices);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 500;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pAddServiceUsage.add(jScrollPane7, gridBagConstraints);

        btnAddServiceUsage.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnAddServiceUsage.setText(bundle.getString("ADD_SERVICEUSAGE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 25, 0);
        pAddServiceUsage.add(btnAddServiceUsage, gridBagConstraints);

        jLabel32.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel32.setText(bundle.getString("QUANTITY"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 250, 25, 25);
        pAddServiceUsage.add(jLabel32, gridBagConstraints);

        tfQuantity.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tfQuantity.setMinimumSize(new java.awt.Dimension(250, 30));
        tfQuantity.setPreferredSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(25, 250, 25, 25);
        pAddServiceUsage.add(tfQuantity, gridBagConstraints);

        spAddServiceUsage.setViewportView(pAddServiceUsage);

        jPanel3.add(spAddServiceUsage, "card18");

        pAddAccommodation1.setBackground(new java.awt.Color(255, 255, 255));
        pAddAccommodation1.setLayout(new java.awt.GridBagLayout());

        jLabel44.setFont(new java.awt.Font("Arial", 0, 35)); // NOI18N
        jLabel44.setText(bundle.getString("ACC_WITH_RESERVATION_LB"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        pAddAccommodation1.add(jLabel44, gridBagConstraints);

        tbAccReservations.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbAccReservations.getTableHeader().setFont(new java.awt.Font("Arial", 1, 15));
        tbAccReservations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                bundle.getString("CUSTOMER_NAME_TB"), bundle.getString("CUSTOMER_PHONE_TB"), bundle.getString("DATE_FROM_TB"), bundle.getString("DATE_TO_TB"), bundle.getString("ROOM_TB"), bundle.getString("PRICE_TB")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbAccReservations.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane11.setViewportView(tbAccReservations);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 500;
        gridBagConstraints.ipady = 100;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        pAddAccommodation1.add(jScrollPane11, gridBagConstraints);

        btnAddAcc1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        btnAddAcc1.setText(bundle.getString("ADD_ACCOMMODATION"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 50, 25);
        pAddAccommodation1.add(btnAddAcc1, gridBagConstraints);

        lbAccFrom1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbAccFrom1.setText(bundle.getString("DATE_FROM"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 300, 10, 25);
        pAddAccommodation1.add(lbAccFrom1, gridBagConstraints);

        lbAccName1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbAccName1.setText(bundle.getString("CUSTOMER_NAME"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 300, 10, 25);
        pAddAccommodation1.add(lbAccName1, gridBagConstraints);

        lbAccRoom1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbAccRoom1.setText(bundle.getString("ROOM"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 300, 10, 25);
        pAddAccommodation1.add(lbAccRoom1, gridBagConstraints);

        lbAccTo1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbAccTo1.setText(bundle.getString("DATE_TO"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 300, 10, 25);
        pAddAccommodation1.add(lbAccTo1, gridBagConstraints);

        lbAccPrice1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        lbAccPrice1.setText(bundle.getString("PRICE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 300, 10, 25);
        pAddAccommodation1.add(lbAccPrice1, gridBagConstraints);

        spAddAccommodation1.setViewportView(pAddAccommodation1);

        jPanel3.add(spAddAccommodation1, "card18");

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenuBar1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N

        jMenu5.setText(bundle.getString("VIEW"));
        jMenu5.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N

        miViewHomePage.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miViewHomePage.setText(bundle.getString("VIEW_HOMEPAGE"));
        jMenu5.add(miViewHomePage);

        jMenuBar1.add(jMenu5);

        jMenu1.setText(bundle.getString("ACCOMMODATION_MENU"));
        jMenu1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N

        miAccWithReservation.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miAccWithReservation.setText(bundle.getString("ACC_WITH_RESERVATION_MENU"));
        jMenu1.add(miAccWithReservation);

        miAccWithoutReservation.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miAccWithoutReservation.setText(bundle.getString("ACC_WITHOUT_RESERVATION_MENU"));
        jMenu1.add(miAccWithoutReservation);

        miPayment.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miPayment.setText(bundle.getString("PAYMENT_MENU"));
        jMenu1.add(miPayment);

        miViewEnded.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miViewEnded.setText(bundle.getString("ENDED_MENU"));
        jMenu1.add(miViewEnded);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(bundle.getString("RESERVATIONS_MENU"));
        jMenu2.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N

        miCreateReservation.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miCreateReservation.setText(bundle.getString("CREATE_RESERVATION_MENU"));
        jMenu2.add(miCreateReservation);

        miCancelReservation.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miCancelReservation.setText(bundle.getString("REMOVE_RESERVATION_MENU"));
        jMenu2.add(miCancelReservation);

        jMenuBar1.add(jMenu2);

        jMenu3.setText(bundle.getString("CUSTOMERS_MENU"));
        jMenu3.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N

        miCreateCustomer.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miCreateCustomer.setText(bundle.getString("CREATE_CUSTOMER_MENU"));
        jMenu3.add(miCreateCustomer);

        miCustomerHistory.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miCustomerHistory.setText(bundle.getString("CUSTOMER_HISTORY_MENU"));
        jMenu3.add(miCustomerHistory);

        jMenuBar1.add(jMenu3);

        jMenu6.setText(bundle.getString("ROOMS_MENU"));
        jMenu6.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N

        miCreateCategory.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miCreateCategory.setText(bundle.getString("CREATE_CATEGORY_MENU"));
        jMenu6.add(miCreateCategory);

        miCreateRoom.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miCreateRoom.setText(bundle.getString("CREATE_ROOM_MENU"));
        jMenu6.add(miCreateRoom);

        miEditRoom.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miEditRoom.setText(bundle.getString("EDIT_ROOM_MENU"));
        jMenu6.add(miEditRoom);

        miRoomHistory.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miRoomHistory.setText(bundle.getString("ROOM_HISTORY_MENU"));
        jMenu6.add(miRoomHistory);

        jMenuBar1.add(jMenu6);

        jMenu7.setText(bundle.getString("SERVICES_MENU"));
        jMenu7.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N

        miCreateService.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miCreateService.setText(bundle.getString("CREATE_SERVICE_MENU"));
        jMenu7.add(miCreateService);

        miAddServiceUsage.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miAddServiceUsage.setText(bundle.getString("CREATE_SERVICEUSAGE_MENU"));
        jMenu7.add(miAddServiceUsage);

        jMenuBar1.add(jMenu7);

        jMenu4.setText(bundle.getString("SETTINGS_MENU"));
        jMenu4.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N

        miChangeDate.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        miChangeDate.setText(bundle.getString("SETTINGS_TIME_MENU"));
        jMenu4.add(miChangeDate);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccFindRoom;
    private javax.swing.JButton btnAddAcc1;
    private javax.swing.JButton btnAddAcc2;
    private javax.swing.JButton btnAddCategory;
    private javax.swing.JButton btnAddPhoto;
    private javax.swing.JButton btnAddServiceUsage;
    private javax.swing.JButton btnCancelReservation;
    private javax.swing.JButton btnCreateCustomer;
    private javax.swing.JButton btnCreatePayment;
    private javax.swing.JButton btnCreateReservation;
    private javax.swing.JButton btnCreateRoom;
    private javax.swing.JButton btnCreateService;
    private javax.swing.JButton btnEditFill;
    private javax.swing.JButton btnEditNext;
    private javax.swing.JButton btnEditPrev;
    private javax.swing.JButton btnEditRoom;
    private javax.swing.JButton btnResFindRoom;
    private javax.swing.JButton btnSetTime;
    private javax.swing.JButton btnViewCustomerHistory;
    private javax.swing.JButton btnViewRoomHistory;
    private javax.swing.JComboBox<String> cbDay;
    private javax.swing.JComboBox<String> cbHour;
    private javax.swing.JComboBox<String> cbLanguage;
    private javax.swing.JComboBox<String> cbMinutes;
    private javax.swing.JComboBox<String> cbMonth;
    private javax.swing.JComboBox<String> cbPaymentType;
    private javax.swing.JComboBox<String> cbYear;
    private javax.swing.JFormattedTextField ftfAccFrom2;
    private javax.swing.JFormattedTextField ftfAccTo2;
    private javax.swing.JFormattedTextField ftfReservationFrom;
    private javax.swing.JFormattedTextField ftfReservationTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lbAccEnd;
    private javax.swing.JLabel lbAccFrom1;
    private javax.swing.JLabel lbAccName1;
    private javax.swing.JLabel lbAccPrice1;
    private javax.swing.JLabel lbAccRoom1;
    private javax.swing.JLabel lbAccRoom2;
    private javax.swing.JLabel lbAccStart;
    private javax.swing.JLabel lbAccTo1;
    private javax.swing.JLabel lbCancelResFrom;
    private javax.swing.JLabel lbCancelResName;
    private javax.swing.JLabel lbCancelResPrice;
    private javax.swing.JLabel lbCancelResRoom;
    private javax.swing.JLabel lbCancelResTo;
    private javax.swing.JLabel lbDate;
    private javax.swing.JLabel lbEndedFrom;
    private javax.swing.JLabel lbEndedName;
    private javax.swing.JLabel lbEndedPrice;
    private javax.swing.JLabel lbEndedRoom;
    private javax.swing.JLabel lbEndedTo;
    private javax.swing.JLabel lbPaymentFrom;
    private javax.swing.JLabel lbPaymentName;
    private javax.swing.JLabel lbPaymentPrice;
    private javax.swing.JLabel lbPaymentTo;
    private javax.swing.JLabel lbPaymnetRoom;
    private javax.swing.JLabel lbPhoto;
    private javax.swing.JLabel lbResRoom;
    private javax.swing.JLabel lbTime;
    private javax.swing.JMenuItem miAccWithReservation;
    private javax.swing.JMenuItem miAccWithoutReservation;
    private javax.swing.JMenuItem miAddServiceUsage;
    private javax.swing.JMenuItem miCancelReservation;
    private javax.swing.JMenuItem miChangeDate;
    private javax.swing.JMenuItem miCreateCategory;
    private javax.swing.JMenuItem miCreateCustomer;
    private javax.swing.JMenuItem miCreateReservation;
    private javax.swing.JMenuItem miCreateRoom;
    private javax.swing.JMenuItem miCreateService;
    private javax.swing.JMenuItem miCustomerHistory;
    private javax.swing.JMenuItem miEditRoom;
    private javax.swing.JMenuItem miPayment;
    private javax.swing.JMenuItem miRoomHistory;
    private javax.swing.JMenuItem miViewEnded;
    private javax.swing.JMenuItem miViewHomePage;
    private javax.swing.JPanel pAddAccommodation1;
    private javax.swing.JPanel pAddAccommodation2;
    private javax.swing.JPanel pAddServiceUsage;
    private javax.swing.JPanel pCancelReservation;
    private javax.swing.JPanel pCreateCategory;
    private javax.swing.JPanel pCreateCustomer;
    private javax.swing.JPanel pCreatePayment;
    private javax.swing.JPanel pCreateReservation;
    private javax.swing.JPanel pCreateRoom;
    private javax.swing.JPanel pCreateService;
    private javax.swing.JPanel pEditRoom;
    private javax.swing.JPanel pEndedAccommodations;
    private javax.swing.JPanel pHomePage;
    private javax.swing.JPanel pRoomHistory;
    private javax.swing.JPanel pSetDate;
    private javax.swing.JPanel pViewCustomerHistory;
    private javax.swing.JScrollPane spAddAccommodation1;
    private javax.swing.JScrollPane spAddAccommodation2;
    private javax.swing.JScrollPane spAddServiceUsage;
    private javax.swing.JScrollPane spCancelReservation;
    private javax.swing.JScrollPane spCreateCustomer;
    private javax.swing.JScrollPane spCreatePayment;
    private javax.swing.JScrollPane spCreateReservation;
    private javax.swing.JScrollPane spCreateRoom;
    private javax.swing.JScrollPane spEditRoom;
    private javax.swing.JScrollPane spEndedAccommodations;
    private javax.swing.JScrollPane spRoomHistory;
    private javax.swing.JScrollPane spViewCustomerHistory;
    private javax.swing.JTextArea taCategoryDescription;
    private javax.swing.JTextArea taEditDescription;
    private javax.swing.JTextArea taRoomDescription;
    private javax.swing.JTextArea taServiceDescription;
    private javax.swing.JTable tbAccHistory;
    private javax.swing.JTable tbAccReservations;
    private javax.swing.JTable tbAccRooms;
    private javax.swing.JTable tbCategories;
    private javax.swing.JTable tbCustomerAcc;
    private javax.swing.JTable tbCustomers;
    private javax.swing.JTable tbEndedAccommodations;
    private javax.swing.JTable tbPaymentAcc;
    private javax.swing.JTable tbReservations;
    private javax.swing.JTable tbReservationsRooms;
    private javax.swing.JTable tbRoomsHistory;
    private javax.swing.JTable tbServices;
    private javax.swing.JTable tbUsedServices;
    private javax.swing.JTextField tfAccName2;
    private javax.swing.JTextField tfAccPhone2;
    private javax.swing.JTextField tfAccPrice2;
    private javax.swing.JTextField tfAddUsageRoom;
    private javax.swing.JTextField tfAddress;
    private javax.swing.JTextField tfCategoryPrice;
    private javax.swing.JTextField tfEditName;
    private javax.swing.JTextField tfEmail;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfNumber;
    private javax.swing.JTextField tfPSC;
    private javax.swing.JTextField tfPhone;
    private javax.swing.JTextField tfQuantity;
    private javax.swing.JTextField tfReservationName;
    private javax.swing.JTextField tfReservationPhone;
    private javax.swing.JTextField tfReservationPrice;
    private javax.swing.JTextField tfRoomLabel;
    private javax.swing.JTextField tfServiceName;
    private javax.swing.JTextField tfServicePrice;
    private javax.swing.JTextField tfTown;
    // End of variables declaration//GEN-END:variables

    private LocalDate date = LocalDate.now();
    
    private LocalTime time = LocalTime.now();
    
    public ResourceBundle getBundle() {
        return bundle;
    }
    
    public void setBundle(String path, Locale loc) {
        this.locale = loc;
        this.bundle = ResourceBundle.getBundle(path, locale);
        initComponents();
    }
    
    public Locale getLocale() {
        return locale;
    }

    public LocalDate getDate() {
        return date;
    }

    public void setDate(LocalDate date) {
        this.date = date;
    }

    public LocalTime getTime() {
        return time;
    }

    public void setTime(LocalTime time) {
        this.time = time;
    }
    
    public void setLbDate(String text) {
        lbDate.setText(text);
    }
    
    public void setLbTime(String text) {
        lbTime.setText(text);
    }

    public JMenuItem getMiAccWithReservation() {
        return miAccWithReservation;
    }

    public JMenuItem getMiAccWithoutReservation() {
        return miAccWithoutReservation;
    }

    public JMenuItem getMiAddServiceUsage() {
        return miAddServiceUsage;
    }

    public JMenuItem getMiCancelReservation() {
        return miCancelReservation;
    }

    public JMenuItem getMiChangeDate() {
        return miChangeDate;
    }

    public JMenuItem getMiCreateCategory() {
        return miCreateCategory;
    }

    public JMenuItem getMiCreateCustomer() {
        return miCreateCustomer;
    }

    public JMenuItem getMiCreateReservation() {
        return miCreateReservation;
    }

    public JMenuItem getMiCreateRoom() {
        return miCreateRoom;
    }

    public JMenuItem getMiCreateService() {
        return miCreateService;
    }

    public JMenuItem getMiCustomerHistory() {
        return miCustomerHistory;
    }

    public JMenuItem getMiEditRoom() {
        return miEditRoom;
    }

    public JMenuItem getMiPayment() {
        return miPayment;
    }

    public JMenuItem getMiViewEnded() {
        return miViewEnded;
    }

    public JMenuItem getMiViewHomePage() {
        return miViewHomePage;
    }

    public JButton getBtnCreateCustomer() {
        return btnCreateCustomer;
    }

    public JScrollPane getspCreateCustomer() {
        return spCreateCustomer;
    }

    public String getTfAddress() {
        return tfAddress.getText().trim();
    }

    public String getTfEmail() {
        return tfEmail.getText().trim();
    }

    public String getTfName() {
        return tfName.getText().trim();
    }

    public String getTfNumber() {
        return tfNumber.getText().trim();
    }

    public String getTfPSC() {
        return tfPSC.getText().trim();
    }

    public String getTfPhone() {
        return tfPhone.getText().trim();
    }

    public String getTfTown() {
        return tfTown.getText().trim();
    }

    public void setTfAddress(String text) {
        this.tfAddress.setText(text);
    }

    public void setTfEmail(String text) {
        this.tfEmail.setText(text);
    }

    public void setTfName(String text) {
        this.tfName.setText(text);
    }

    public void setTfNumber(String text) {
        this.tfNumber.setText(text);
    }

    public void setTfPSC(String text) {
        this.tfPSC.setText(text);
    }

    public void setTfPhone(String text) {
        this.tfPhone.setText(text);
    }

    public void setTfTown(String text) {
        this.tfTown.setText(text);
    }

    public String getTaCategoryDescription() {
        return taCategoryDescription.getText().trim();
    }

    public void setTaCategoryDescription(String text) {
        this.taCategoryDescription.setText(text);
    }

    public double getTfCategoryPrice() {
        try {
            if (tfCategoryPrice.getText().trim().equals("")) {
                return 0;
            }
            return Double.parseDouble(tfCategoryPrice.getText().trim());
        } catch (NumberFormatException e) {
            logger.warn(bundle.getString("PRICE_BAD_FORMAT"), e);
            return -1;
        }
    }

    public void setTfCategoryPrice(String text) {
        this.tfCategoryPrice.setText(text);
    }

    public JButton getBtnAddCategory() {
        return btnAddCategory;
    }

    public JPanel getpCreateCategory() {
        return pCreateCategory;
    }

    public String getTaRoomDescription() {
        return taRoomDescription.getText().trim();
    }

    public void setTaRoomDescription(String text) {
        this.taRoomDescription.setText(text);
    }

    public String getTfRoomLabel() {
        return tfRoomLabel.getText().trim();
    }

    public void setTfRoomLabel(String text) {
        this.tfRoomLabel.setText(text);
    }

    public JButton getBtnCreateRoom() {
        return btnCreateRoom;
    }

    public JTable getTbCategoriesTable() {
        return tbCategories;
    }
    
    public DefaultTableModel getTbCategoriesModel() {
        return (DefaultTableModel) tbCategories.getModel();
    }

    public JScrollPane getspCreateRoom() {
        return spCreateRoom;
    }

    public JButton getBtnCreateService() {
        return btnCreateService;
    }

    public JPanel getpCreateService() {
        return pCreateService;
    }

    public String getTaServiceDescription() {
        return taServiceDescription.getText().trim();
    }

    public void setTaServiceDescription(String text) {
        this.taServiceDescription.setText(text);
    }

    public String getTfServiceName() {
        return tfServiceName.getText().trim();
    }

    public void setTfServiceName(String text) {
        this.tfServiceName.setText(text);
    }

    public double getTfServicePrice() {
        try {
            if (tfServicePrice.getText().trim().equals("")) {
                return 0;
            }
            return Double.parseDouble(tfServicePrice.getText().trim());
        } catch (NumberFormatException e) {
            logger.warn(bundle.getString("PRICE_BAD_FORMAT"), e);
            return -1;
        }
    }

    public void setTfServicePrice(String text) {
        this.tfServicePrice.setText(text);
    }

    public String getFtfReservationFrom() {
        return ftfReservationFrom.getText().trim();
    }

    public void setFtfReservationFrom(String text) {
        this.ftfReservationFrom.setText(text);
    }

    public String getFtfReservationTo() {
        return ftfReservationTo.getText().trim();
    }

    public void setFtfReservationTo(String text) {
        this.ftfReservationTo.setText(text);
    }

    public void setLbResRoom(String text) {
        this.lbResRoom.setText(text);
    }

    public JTable getTbReservationsRoomsTable() {
        return tbReservationsRooms;
    }
    
    public DefaultTableModel getTbReservationsRoomsModel() {
        return (DefaultTableModel) tbReservationsRooms.getModel();
    }
    
    public String getTfReservationName() {
        return tfReservationName.getText().trim();
    }

    public void setTfReservationName(String text) {
        this.tfReservationName.setText(text);
    }

    public double getTfReservationPrice() {
        try {
            if (tfReservationPrice.getText().trim().equals("")) {
                return 0;
            }
            return Double.parseDouble(tfReservationPrice.getText().trim());
        } catch (NumberFormatException e) {
            logger.warn(bundle.getString("PRICE_BAD_FORMAT"), e);
            return -1;
        }
    }

    public void setTfReservationPrice(String text) {
        this.tfReservationPrice.setText(text);
    }

    public JButton getBtnCreateReservation() {
        return btnCreateReservation;
    }

    public JScrollPane getspCreateReservation() {
        return spCreateReservation;
    }

    public String getTfReservationPhone() {
        return tfReservationPhone.getText().trim();
    }

    public void setTfReservationPhone(String text) {
        this.tfReservationPhone.setText(text);
    }

    public JButton getBtnCancelReservation() {
        return btnCancelReservation;
    }

    public JTable getTbReservationsTable() {
        return tbReservations;
    }
    
    public DefaultTableModel getTbReservationsModel() {
        return (DefaultTableModel) tbReservations.getModel();
    }

    public JScrollPane getspCancelReservation() {
        return spCancelReservation;
    }
    
    public void setLbCancelResFrom(String text) {
        this.lbCancelResFrom.setText(text);
    }

    public void setLbCancelResName(String text) {
        this.lbCancelResName.setText(text);
    }

    public void setLbCancelResPrice(String text) {
        this.lbCancelResPrice.setText(text);
    }

    public void setLbCancelResRoom(String text) {
        this.lbCancelResRoom.setText(text);
    }

    public void setLbCancelResTo(String text) {
        this.lbCancelResTo.setText(text);
    }

    public JScrollPane getspEndedAccommodations() {
        return spEndedAccommodations;
    }

    public JTable getTbEndedAccommodationsTable() {
        return tbEndedAccommodations;
    }
    
    public DefaultTableModel getTbEndedAccommodationsModel() {
        return (DefaultTableModel) tbEndedAccommodations.getModel();
    }

    public void setLbEndedFrom(String text) {
        this.lbEndedFrom.setText(text);
    }

    public void setLbEndedName(String text) {
        this.lbEndedName.setText(text);
    }

    public void setLbEndedPrice(String text) {
        this.lbEndedPrice.setText(text);
    }

    public void setLbEndedRoom(String text) {
        this.lbEndedRoom.setText(text);
    }

    public void setLbEndedTo(String text) {
        this.lbEndedTo.setText(text);
    }

    public JComboBox<String> getCbDay() {
        return cbDay;
    }

    public JComboBox<String> getCbHour() {
        return cbHour;
    }

    public JComboBox<String> getCbMinutes() {
        return cbMinutes;
    }

    public JComboBox<String> getCbMonth() {
        return cbMonth;
    }

    public JComboBox<String> getCbYear() {
        return cbYear;
    }

    public JButton getBtnSetTime() {
        return btnSetTime;
    }

    public JPanel getpSetDate() {
        return pSetDate;
    }

    public JButton getBtnAddServiceUsage() {
        return btnAddServiceUsage;
    }

    public JScrollPane getspAddServiceUsage() {
        return spAddServiceUsage;
    }

    public JTable getTbServicesTable() {
        return tbServices;
    }
    
    public DefaultTableModel getTbServicesModel() {
        return (DefaultTableModel) tbServices.getModel();
    }

    public String getTfAddUsageRoom() {
        return tfAddUsageRoom.getText().trim();
    }

    public void setTfAddUsageRoom(String text) {
        this.tfAddUsageRoom.setText(text);
    }

    public int getTfQuantity() {
        try {
            if (tfQuantity.getText().trim().equals("")) {
                return 0;
            }
            return Integer.parseInt(tfQuantity.getText().trim());
        } catch (NumberFormatException e) {
            logger.warn(bundle.getString("QUANTITY_BAD_FORMAT"), e);
            return -1;
        }
    }

    public void setTfQuantity(String text) {
        this.tfQuantity.setText(text);
    }

    public JButton getBtnViewCustomerHistory() {
        return btnViewCustomerHistory;
    }

    public JScrollPane getspViewCustomerHistory() {
        return spViewCustomerHistory;
    }

    public JTable getTbCustomerAccTable() {
        return tbCustomerAcc;
    }

    public JTable getTbCustomersTable() {
        return tbCustomers;
    }
    
    public DefaultTableModel getTbCustomerAccModel() {
        return (DefaultTableModel) tbCustomerAcc.getModel();
    }

    public DefaultTableModel getTbCustomersModel() {
        return (DefaultTableModel) tbCustomers.getModel();
    }

    public JButton getBtnAddPhoto() {
        return btnAddPhoto;
    }

    public JButton getBtnEditNext() {
        return btnEditNext;
    }

    public JButton getBtnEditPrev() {
        return btnEditPrev;
    }

    public JButton getBtnEditRoom() {
        return btnEditRoom;
    }

    public JButton getBtnEditFill() {
        return btnEditFill;
    }
    
    public void setLbPhoto(ImageIcon image) {
        if (image == null) {
            this.lbPhoto.setPreferredSize(new Dimension(0,0));
            this.lbPhoto.setIcon(image);
        } else {
            this.lbPhoto.setPreferredSize(new Dimension(300,300));
            this.lbPhoto.setIcon(new ImageIcon(image.getImage().getScaledInstance(300, 300, Image.SCALE_SMOOTH)));
        }
    }

    public JScrollPane getspEditRoom() {
        return spEditRoom;
    }

    public String getTaEditDescription() {
        return taEditDescription.getText().trim();
    }

    public String getTfEditName() {
        return tfEditName.getText().trim();
    }
    
    public void setTaEditDescription(String text) {
        taEditDescription.setText(text);
    }

    public void setTfEditName(String text) {
        tfEditName.setText(text);
    }

    public JButton getBtnAddAcc1() {
        return btnAddAcc1;
    }

    public JTable getTbAccReservationsTable() {
        return tbAccReservations;
    }
    
    public DefaultTableModel getTbAccReservationsModel() {
        return (DefaultTableModel) tbAccReservations.getModel();
    }

    public void setLbAccFrom1(String text) {
        this.lbAccFrom1.setText(text);
    }

    public void setLbAccName1(String text) {
        this.lbAccName1.setText(text);
    }

    public void setLbAccPrice1(String text) {
        this.lbAccPrice1.setText(text);
    }

    public void setLbAccRoom1(String text) {
        this.lbAccRoom1.setText(text);
    }

    public void setLbAccTo1(String text) {
        this.lbAccTo1.setText(text);
    }

    public JScrollPane getspAddAccommodation1() {
        return spAddAccommodation1;
    }

    public JButton getBtnAccFindRoom() {
        return btnAccFindRoom;
    }

    public JButton getBtnAddAcc2() {
        return btnAddAcc2;
    }

    public String getFtfAccFrom2() {
        return ftfAccFrom2.getText().trim();
    }

    public String getFtfAccTo2() {
        return ftfAccTo2.getText().trim();
    }

    public JScrollPane getspAddAccommodation2() {
        return spAddAccommodation2;
    }

    public JTable getTbAccRoomsTable() {
        return tbAccRooms;
    }
    
    public DefaultTableModel getTbAccRoomsModel() {
        return (DefaultTableModel) tbAccRooms.getModel();
    }

    public String getTfAccName2() {
        return tfAccName2.getText().trim();
    }

    public String getTfAccPhone2() {
        return tfAccPhone2.getText().trim();
    }

    public double getTfAccPrice2() {
        try {
            if (tfAccPrice2.getText().trim().equals("")) {
                return 0;
            }
            return Double.parseDouble(tfAccPrice2.getText().trim());
        } catch (NumberFormatException e) {
            logger.warn(bundle.getString("PRICE_BAD_FORMAT"), e);
            return -1;
        }
    }

    public void setFtfAccFrom2(String text) {
        this.ftfAccFrom2.setText(text);
    }

    public void setFtfAccTo2(String text) {
        this.ftfAccTo2.setText(text);
    }

    public void setTfAccName2(String text) {
        this.tfAccName2.setText(text);
    }

    public void setTfAccPhone2(String text) {
        this.tfAccPhone2.setText(text);
    }

    public void setTfAccPrice2(String text) {
        this.tfAccPrice2.setText(text);
    }

    public JButton getBtnCreatePayment() {
        return btnCreatePayment;
    }

    public JComboBox<String> getCbPaymentType() {
        return cbPaymentType;
    }

    public JTable getTbPaymentAccTable() {
        return tbPaymentAcc;
    }
    
    public DefaultTableModel getTbPaymentAccModel() {
        return (DefaultTableModel) tbPaymentAcc.getModel();
    }

    public JScrollPane getspCreatePayment() {
        return spCreatePayment;
    }

    public void setLbPaymentFrom(String text) {
        this.lbPaymentFrom.setText(text);
    }

    public void setLbPaymentName(String text) {
        this.lbPaymentName.setText(text);
    }

    public void setLbPaymentPrice(String text) {
        this.lbPaymentPrice.setText(text);
    }

    public void setLbPaymentTo(String text) {
        this.lbPaymentTo.setText(text);
    }

    public void setLbPaymnetRoom(String text) {
        this.lbPaymnetRoom.setText(text);
    }
    
    public JButton getBtnResFindRoom() {
        return btnResFindRoom;
    }

    public void setLbAccRoom2(String text) {
        this.lbAccRoom2.setText(text);
    }

    public JMenuItem getMiRoomHistory() {
        return miRoomHistory;
    }

    public JButton getBtnViewRoomHistory() {
        return btnViewRoomHistory;
    }

    public JScrollPane getspRoomHistory() {
        return spRoomHistory;
    }

    public JTable getTbAccHistoryTable() {
        return tbAccHistory;
    }
    
    public DefaultTableModel getTbAccHistoryModel() {
        return (DefaultTableModel) tbAccHistory.getModel();
    }

    public JTable getTbRoomsHistoryTable() {
        return tbRoomsHistory;
    }
    
    public DefaultTableModel getTbRoomsHistoryModel() {
        return (DefaultTableModel) tbRoomsHistory.getModel();
    }

    public DefaultTableModel getTbUsedServicesModel() {
        return (DefaultTableModel) tbUsedServices.getModel();
    }

    public void setLbAccEnd(String text) {
        this.lbAccEnd.setText(text);
    }

    public void setLbAccStart(String text) {
        this.lbAccStart.setText(text);
    }

    public JComboBox<String> getCbLanguage() {
        return cbLanguage;
    }

    public JPanel getpHomePage() {
        return pHomePage;
    }
    
    public void removeListeners() {
        // Create Customer Window
        for (MouseListener ml : btnCreateCustomer.getMouseListeners()) {
            btnCreateCustomer.removeMouseListener(ml);
        }
         // Add Category Window
        for (MouseListener ml : btnAddCategory.getMouseListeners()) {
            btnAddCategory.removeMouseListener(ml);
        }
        
        // Add Room Window
        for (MouseListener ml : btnCreateRoom.getMouseListeners()) {
            btnCreateRoom.removeMouseListener(ml);
        }
        
        // Add Service Window
        for (MouseListener ml : btnCreateService.getMouseListeners()) {
            btnCreateService.removeMouseListener(ml);
        }
        
        // Create Reservation Window
        for (MouseListener ml : btnCreateReservation.getMouseListeners()) {
            btnCreateReservation.removeMouseListener(ml);
        }
        /*for (MouseListener ml : tbReservationsRooms.getMouseListeners()) {
            tbReservationsRooms.removeMouseListener(ml);
        }*/
        for (MouseListener ml : btnResFindRoom.getMouseListeners()) {
            btnResFindRoom.removeMouseListener(ml);
        }
        
        // Cancel Reservation Window
        for (MouseListener ml : btnCancelReservation.getMouseListeners()) {
            btnCancelReservation.removeMouseListener(ml);
        }
        for (MouseListener ml : tbReservations.getMouseListeners()) {
            tbReservations.removeMouseListener(ml);
        }
        
        // View Ended Accomodations Window
        for (MouseListener ml : tbEndedAccommodations.getMouseListeners()) {
            tbEndedAccommodations.removeMouseListener(ml);
        }
        
        // Set Date Window
        for (MouseListener ml : btnSetTime.getMouseListeners()) {
            btnSetTime.removeMouseListener(ml);
        }
        
        // Add Service Usage Window
        for (MouseListener ml : btnAddServiceUsage.getMouseListeners()) {
            btnAddServiceUsage.removeMouseListener(ml);
        }
        
        // View Customer history Window
        for (MouseListener ml : btnViewCustomerHistory.getMouseListeners()) {
            btnViewCustomerHistory.removeMouseListener(ml);
        }
        for (MouseListener ml : tbCustomerAcc.getMouseListeners()) {
            tbCustomerAcc.removeMouseListener(ml);
        }
        
        // Edit Room Window
        for (MouseListener ml : btnEditNext.getMouseListeners()) {
            btnEditNext.removeMouseListener(ml);
        }
        for (MouseListener ml : btnEditPrev.getMouseListeners()) {
            btnEditPrev.removeMouseListener(ml);
        }
        for (MouseListener ml : btnEditRoom.getMouseListeners()) {
            btnEditRoom.removeMouseListener(ml);
        }
        for (MouseListener ml : btnAddPhoto.getMouseListeners()) {
            btnAddPhoto.removeMouseListener(ml);
        }
        for (MouseListener ml : btnEditFill.getMouseListeners()) {
            btnEditFill.removeMouseListener(ml);
        }
        
        // Add Accomodation with reservation Window
        for (MouseListener ml : tbAccReservations.getMouseListeners()) {
            tbAccReservations.removeMouseListener(ml);
        }
        for (MouseListener ml : btnAddAcc1.getMouseListeners()) {
            btnAddAcc1.removeMouseListener(ml);
        }
        
        // Add Accomodation without reservation Window
        for (MouseListener ml : btnAddAcc2.getMouseListeners()) {
            btnAddAcc2.removeMouseListener(ml);
        }
        for (MouseListener ml : btnAccFindRoom.getMouseListeners()) {
            btnAccFindRoom.removeMouseListener(ml);
        }
        for (MouseListener ml : tbAccRooms.getMouseListeners()) {
            tbAccRooms.removeMouseListener(ml);
        }
        
        // Create payment Window
        for (MouseListener ml : btnCreatePayment.getMouseListeners()) {
            btnCreatePayment.removeMouseListener(ml);
        }
        for (MouseListener ml : tbPaymentAcc.getMouseListeners()) {
            tbPaymentAcc.removeMouseListener(ml);
        }
        
        // View Room history Window
        for (MouseListener ml : btnViewRoomHistory.getMouseListeners()) {
            btnViewRoomHistory.removeMouseListener(ml);
        }

    }
    
}
